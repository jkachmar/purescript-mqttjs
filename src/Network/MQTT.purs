module Network.MQTT
  ( module Network.MQTT
  , module Exports
  ) where

import Control.Bind (bind)
import Control.Monad.Aff (Aff)
import Control.Monad.Eff (Eff, kind Effect)
import Control.Monad.Eff.Uncurried (EffFn1, EffFn2, EffFn3, runEffFn1, runEffFn2, runEffFn3)
import Control.Promise (Promise, fromAff, toAffE)
import Data.Foreign (Foreign)
import Data.Function (($))
import Data.Newtype (class Newtype, unwrap)
import Data.Unit (Unit)
import Network.MQTT.Internal (Message(..), Topic(..)) as Exports
import Network.MQTT.Internal (Message, Topic, unsafeReadMessage, unsafeReadTopic)
import Node.Buffer (BUFFER)

--------------------------------------------------------------------------------
-- | The MQTT broker URL.
newtype BrokerUrl = BrokerUrl String
derive instance ntBrokerUrl :: Newtype BrokerUrl _

-- | The MQTT client connection options.
type Options =
  { port     :: Int
  , clientId :: String
  , username :: String
  , password :: String
  }

--------------------------------------------------------------------------------
-- | Effects generated by the MQTT client.
foreign import data MQTT :: Effect

-- | A JavaScript MQTT client.
foreign import data Client :: Type

--------------------------------------------------------------------------------
foreign import _connect :: ∀ e.
  EffFn2 (mqtt :: MQTT | e)
    String
    Options
    Client

-- | Connect to the MQTT broker at the given URL using the supplied connection
-- | options.
connect :: ∀ e. BrokerUrl -> Options -> Eff (mqtt :: MQTT | e) Client
connect url opts = runEffFn2 _connect (unwrap url) opts

--------------------------------------------------------------------------------
foreign import _onConnectEff :: ∀ e.
  EffFn2 (mqtt :: MQTT | e)
    Client
    (Eff (mqtt :: MQTT | e) Unit)
    Unit

-- | Register a synchronous callback to fire on MQTT broker connection events.
onConnectEff
  :: ∀ e
   . Client
   -> Eff (mqtt :: MQTT | e) Unit
   -> Eff (mqtt :: MQTT | e) Unit
onConnectEff client handler =
  runEffFn2 _onConnectEff client handler

--------------------------------------------------------------------------------
foreign import _onConnectAff :: ∀ e a.
  EffFn2 (mqtt :: MQTT | e)
    Client
    (Eff (mqtt :: MQTT | e) (Promise a))
    (Promise a)

-- | Register a synchronous callback to fire on MQTT broker connection events.
onConnectAff
  :: ∀ e a
   . Client
   -> Aff (mqtt :: MQTT | e) a
   -> Aff (mqtt :: MQTT | e) a
onConnectAff client handler =
  let handler' = fromAff handler
  in toAffE $ runEffFn2 _onConnectAff client handler'

--------------------------------------------------------------------------------
foreign import _onMessageEff :: ∀ e a.
  EffFn2 (mqtt :: MQTT | e)
    Client
    (Foreign -> Foreign -> Eff (mqtt :: MQTT | e) a)
    a

-- | Register a synchronous callback to fire on incoming MQTT message events.
onMessageEff
  :: ∀ e a
   . Client
  -> (Topic -> Message -> Eff (buffer :: BUFFER, mqtt :: MQTT | e) a)
  -> Eff (buffer :: BUFFER, mqtt :: MQTT | e) a
onMessageEff client handler = do
  let handler' t m = do
        m' <- unsafeReadMessage m
        handler (unsafeReadTopic t) m'
  runEffFn2 _onMessageEff client handler'

--------------------------------------------------------------------------------
foreign import _onMessageAff :: ∀ e a.
  EffFn2 (mqtt :: MQTT | e)
    Client
    (Foreign -> Foreign -> Eff (mqtt :: MQTT | e) (Promise a))
    (Promise a)

-- | Register an asynchronous callback to fire on incoming MQTT message events.
onMessageAff
  :: ∀ e a
   . Client
  -> (Topic -> Message -> Aff (mqtt :: MQTT, buffer :: BUFFER | e) a)
  -> Aff (mqtt :: MQTT, buffer :: BUFFER | e) a
onMessageAff client handler =
  let handler' t m = do
        m' <- unsafeReadMessage m
        fromAff $ handler (unsafeReadTopic t) m'
  in toAffE $ runEffFn2 _onMessageAff client handler'

--------------------------------------------------------------------------------
foreign import _subscribe :: ∀ e.
  EffFn2 (mqtt :: MQTT | e)
    Client
    String
    (Promise Unit)

-- | Subscribe to a `Topic`.
subscribe :: ∀ e. Client -> Topic -> Aff (mqtt :: MQTT | e) Unit
subscribe client topic =
  toAffE $ runEffFn2 _subscribe client (unwrap topic)

--------------------------------------------------------------------------------
foreign import _publish :: ∀ e.
  EffFn3 (mqtt :: MQTT | e)
    Client
    String
    String
    (Promise Unit)

-- | Publish a `Message` to a `Topic`.
publish :: ∀ e. Client -> Topic -> Message -> Aff (mqtt :: MQTT | e) Unit
publish client topic message =
  toAffE $ runEffFn3 _publish client (unwrap topic) (unwrap message)

--------------------------------------------------------------------------------
foreign import _end :: ∀ e.
  EffFn1 (mqtt :: MQTT | e)
    Client
    Unit

-- | Ends the `Client`'s session.
end :: ∀ e. Client -> Eff (mqtt :: MQTT | e) Unit
end = runEffFn1 _end
